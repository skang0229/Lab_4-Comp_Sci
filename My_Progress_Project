#December 18th 10:45 am - 12:15pm

#divisible
#make requirements. Create a while loop, so that until the requirement is acheived, the number value will conintue to increase
#error messages saying unsupported operand type, or value is not defined.
#testing the range function
number = 1
#print (list(range(0,20)))
values = list(range(1,21))
for value in values:
  while number % value != 0:
    number += 1

print (number)
  

---------------------


#January 8th 6:30pm-7:10pm; 8:00pm - 8:35pm

"""find the sum of all multiples of 3 or 5 below 1000"""
sum = 0
for num in range(1,1001):
#1 to 1000 inclusive
    if num % 3 == 0 or num % 5 == 0:
    #checks if a num is divisible by 3 or 5 and adds if it is
        sum += num

print (sum)

#sum = 234168


"""Even Fibonacci numbers"""

#initial trial- incorrect version
sum = 0

fib = 1
new_fib = 1
while new_fib < 4000000:
    original = fib
    new_fib = original + new_fib 

print (new_fib) #yields 4000000...


#second trial-correct version

sum = 0
fib = 1 #current fib number in sequence
new_fib = 2 #next, new fib number in sequence
while fib <= 4000000:
    if fib % 2 == 0:
        sum += fib
    fib, new_fib = new_fib, fib + new_fib #use commnas to condense the expressions

print (sum)

#sum = 4613732


----------------

#January 10th 4:30 - 5:15; 6:40 - 7:26

"""What is the largest prime factor of the number 600851475143"""

myNum = 600851475143
factors= []
i = 2 
#if we set this as 1, the while loop will go out to infinity
#a number is divisible by 1 no matter how many times we divide
while myNum != 1:
    if myNum % i != 0:
        i += 1
    else: 
        myNum = myNum/ i
        factors.append(myNum)
#if divisible, divide, if not, check the next number

largest_prime = max(factors)

print(largest_prime)

#largest prime = 8462696833


"""Sum square difference"""

#split into two parts: sum of squares and square of sum
#part 1
sum_squares = 0

for i in range(1,101):
    sum_squares += i ** 2

#part 2
square_sums = 0

for g in range(1,101):
    square_sums += i
square_sums = square_sums ** 2

print (square_sums - sum_squares)

#the difference is 99661650



--------------------
#January 14 12:20-1:00 ; 1:15- 1:52


"""What is the smallest positive number that is evenly divisible by all the numbers from 1 to 20"""
#trial 1 and 2 done in work session 1.

def getfactors(myNum):
    factors = []
    i= 2
    while myNum != 1:
        if myNum % i != 0:
            i += 1
        else: 
            myNum = myNum/ i
            factors.append(i)
    return factors

factors_list = []
for num in range(1, 21):
    factors_list.append(getfactors(num))
#print (factors_list)
#successfully prints out all the factors from 1 to 21. 
#stuck here... how do I sort out the prime numbers for an arbitrary range n?



"""10001st prime"""

allNums = []
for i in range(1, 10001): #would be 1,n for other arbitrary cases
    allNums.append(i)
    
for g in allNums:
    i = 2
    if g/i != 1 and g % i == 0:#if g is not prime
        print (g) #creates an infinite list of numbers... pretty cool to watch the terminal print all the numbers tho
        
        
        
        
-------------------------




#January 18th 5:25- 6:17


"""continuing Smallest multiple"""

def getfactors(myNum):
    factors = []
    i= 2
    while myNum != 1:
        if myNum % i != 0:
            i += 1
        else: 
            myNum = myNum/ i
            factors.append(i)
    return factors

factors_list = []
prime= 1
for num in range(1, 21):
    if len(getfactors(num)) == 1:
        prime *= num
    else:
        factors_list.append(getfactors(num))


def sort_factors(list_of_factors):
    repeated_factors = []
    for element in list_of_factors[1:]:
        while len(element) != 0:
            first = element[0]
            if prime % first == 0:
                element.remove(first)

            elif prime % first != 0:
                repeated_factors.append(first)
                element.remove(first)
        
print (sort_factors(factors_list))
#for some reason, prints out an empty list....
